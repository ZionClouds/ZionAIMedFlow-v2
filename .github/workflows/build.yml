name: Build and Test

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Python environment
      - name: Set up Python 3.11
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install selenium webdriver-manager
          pip install -r src/azurefunctions/mymdnotes/requirements.txt

      # Step 4: Run tests with pytest
      - name: Run Unit Tests
        env:
          PYTHONPATH: src  # Add src to PYTHONPATH
        run: |
          pytest tests/ --cov=src --cov-report=xml --junitxml=test-results.xml
        continue-on-error: true  # Continue even if this step fails

      # Step 5: Upload test results (optional)
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results.xml

      - name: Start Frontend
        working-directory: src/frontends/pdfapprover  # Adjust to correct path
        run: |
          npm install
          npm run dev -- --host&
          sleep 10  # Wait for the server to start
      
      # Step 6: Run Jest Tests
      - name: Run Jest Tests
        continue-on-error: true
        working-directory: src/frontends/pdfapprover  # Adjust to correct path
        run: |
          npm install
          npm test
  
      - name: Run Selenium Tests
        continue-on-error: true  # Continue even if this step fails
        run: |
          pytest tests/selenium_tests/

      # Step 6: Run SonarQube Analysis
      - name: Run SonarQube Analysis
        uses: sonarsource/sonarqube-scan-action@master
        env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
            args: >
                -Dsonar.python.coverage.reportPaths=coverage.xml


      # Optional: Quality Gate Check
      # Uncomment this section if you want the job to fail when the SonarQube Quality Gate fails
      # - name: SonarQube Quality Gate
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
