name: ZCS CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**', 'release/**' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * *'  # Daily security scans

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# Define reusable workflow configurations
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # - name: InitializeCodeQL
      #   uses: github/codeql-action/init@v2
      #   with:
      #     languages: python,javascript
      
      # - name: CodeQL Analysis - SAST
      #   uses: github/codeql-action/analyze@v2
      #   with: 
      #     output: ../results
      #     upload: always
      #     cleanup-level: brutal
      #     skip-queries: false
      #     upload-database: true
      #     wait-for-processing: true
      
      # - name: Dependency Security Scan
      #   uses: snyk/actions/python@master
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
 
      # - name: Container Security Scan - File System
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     scan-type: 'fs'
      #     format: 'sarif'
      #     output: 'trivy-results-fs.sarif'

      # - name: Container Security Scan - Configuration
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     scan-type: 'config'
      #     format: 'sarif'
      #     output: 'trivy-results-config.sarif'

  code-quality:
    name: Code Quality
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Set up Python environment
      - name: Set up Python 3.11
        uses: actions/setup-python@v2
        with:
          python-version: ${{env.PYTHON_VERSION}}
          cache: 'pip'
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install selenium webdriver-manager pytest pytest-cov pytest-xdist pytest-html black isort flake8 mypy
          pip install -r src/azurefunctions/mymdnotes/requirements.txt
          npm ci --prefix src/frontends/pdfapprover
      # pip install -r requirements-dev.txt

      - name: Code Style Check
        continue-on-error: true
        run: |
          black --check .
          isort --check-only .
          flake8 .
          npm run lint --prefix src/frontends/pdfapprover

      - name: Type Check
        continue-on-error: true
        run: |
          mypy src/
          npm run type-check --prefix src/frontends/pdfapprover
    
  unit-test:
    name: Unit Testing
    needs: code-quality
    runs-on: ubuntu-latest
    steps:
      # Step 4: Run tests with pytest
      - name: Run Unit Tests
        env:
          PYTHONPATH: src  # Add src to PYTHONPATH
        run: |
          pytest tests/ --cov=src --cov-report=xml --junitxml=test-results.xml
        continue-on-error: true  # Continue even if this step fails

      # Step 5: Upload test results (optional)
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results.xml

      - name: Start Frontend
        # working-directory: ../src/frontends/pdfapprover  # Adjust to correct path
        run: |
          npm run dev -- --host&
          sleep 10  # Wait for the server to start
        # npm install
    
  selenium-test:
    name: Selenium Test Automation
    needs: unit-test
    runs-on: ubuntu-latest
    steps:
      - name: Run Selenium Tests
        continue-on-error: true  # Continue even if this step fails
        run: |
          pytest tests/selenium_tests/
    
  sonarqube-analysis:
    name: SonarQube Analysis
    needs: selenium-test
    runs-on: ubuntu-latest
    steps:
    # Step 6: Run SonarQube Analysis
    - name: Run SonarQube Analysis
      uses: sonarsource/sonarqube-scan-action@master
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
          args: >
              -Dsonar.projectKey=ZionAIMedFlow-v2
              -Dsonar.organization=ZCS
              -Dsonar.sources=.
              -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
              -Dsonar.login=${{ secrets.SONAR_TOKEN }}
              -Dsonar.python.coverage.reportPaths=coverage.xml

      # Optional: Quality Gate Check
      # Uncomment this section if you want the job to fail when the SonarQube Quality Gate fails
      # - name: SonarQube Quality Gate
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  smoke-test:
    name: Smoke Testing
    # needs: sonarqube-analysis
    runs-on: ubuntu-latest
    steps:
      # Soaham - Testing with Smoke Test File 
    - name: Run Smoke Tests
      env:
        TEST_RESULT: 1  # Control test outcome
      run: |
        cd ..
        pwd
        ls -la
        chmod +x /scripts/smoke-tests.sh
        /scripts/smoke-tests.sh ${{ steps.deploy.outputs.url }}
  
  # performance-test:
  #   name: Performance Testing
  #   # needs: smoke-test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Run k6 Load Tests
  #       uses: grafana/k6-action@v0.2.0
  #       env:
  #         TARGET_URL: ${{ needs.deploy-dev.outputs.url }}
  #       with:
  #         filename: performance/load-tests.js
  #         flags: --vus 10 --duration 30s

  #     - name: Upload Performance Results
  #       if: always()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: performance-results
  #         path: performance/results.json
      
